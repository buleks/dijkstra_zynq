// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dijkstra,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=213,HLS_SYN_LUT=329}" *)

module dijkstra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_data_V_address0,
        in_data_V_ce0,
        in_data_V_q0,
        in_last_V_address0,
        in_last_V_ce0,
        in_last_V_we0,
        in_last_V_d0,
        in_last_V_q0,
        in_last_V_address1,
        in_last_V_ce1,
        in_last_V_we1,
        in_last_V_d1,
        in_last_V_q1,
        start_point_V,
        out_data_V_address0,
        out_data_V_ce0,
        out_data_V_we0,
        out_data_V_d0,
        out_last_V_address0,
        out_last_V_ce0,
        out_last_V_we0,
        out_last_V_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 26'b1;
parameter    ap_ST_st2_fsm_1 = 26'b10;
parameter    ap_ST_st3_fsm_2 = 26'b100;
parameter    ap_ST_st4_fsm_3 = 26'b1000;
parameter    ap_ST_st5_fsm_4 = 26'b10000;
parameter    ap_ST_st6_fsm_5 = 26'b100000;
parameter    ap_ST_st7_fsm_6 = 26'b1000000;
parameter    ap_ST_st8_fsm_7 = 26'b10000000;
parameter    ap_ST_st9_fsm_8 = 26'b100000000;
parameter    ap_ST_st10_fsm_9 = 26'b1000000000;
parameter    ap_ST_st11_fsm_10 = 26'b10000000000;
parameter    ap_ST_st12_fsm_11 = 26'b100000000000;
parameter    ap_ST_st13_fsm_12 = 26'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 26'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 26'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 26'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 26'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 26'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 26'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 26'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 26'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 26'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 26'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 26'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 26'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 26'b10000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_data_V_address0;
output   in_data_V_ce0;
input  [7:0] in_data_V_q0;
output  [5:0] in_last_V_address0;
output   in_last_V_ce0;
output   in_last_V_we0;
output  [0:0] in_last_V_d0;
input  [0:0] in_last_V_q0;
output  [5:0] in_last_V_address1;
output   in_last_V_ce1;
output   in_last_V_we1;
output  [0:0] in_last_V_d1;
input  [0:0] in_last_V_q1;
input  [7:0] start_point_V;
output  [2:0] out_data_V_address0;
output   out_data_V_ce0;
output   out_data_V_we0;
output  [7:0] out_data_V_d0;
output  [2:0] out_last_V_address0;
output   out_last_V_ce0;
output   out_last_V_we0;
output  [0:0] out_last_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_data_V_ce0;
reg out_data_V_ce0;
reg out_data_V_we0;
reg out_last_V_ce0;
reg out_last_V_we0;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm = 26'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_42;
reg   [2:0] vector_address0;
reg    vector_ce0;
reg    vector_we0;
reg   [0:0] vector_d0;
wire   [0:0] vector_q0;
reg   [5:0] matrix_address0;
reg    matrix_ce0;
reg    matrix_we0;
reg   [7:0] matrix_d0;
wire   [7:0] matrix_q0;
reg   [2:0] result_address0;
reg    result_ce0;
reg    result_we0;
wire   [3:0] result_d0;
wire   [3:0] result_q0;
wire   [3:0] i_8_fu_466_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_120;
wire   [3:0] i_9_fu_483_p2;
reg   [3:0] i_9_reg_871;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_129;
wire   [5:0] tmp_4_fu_493_p3;
reg   [5:0] tmp_4_reg_876;
wire   [0:0] exitcond2_fu_477_p2;
wire   [7:0] matrix_addr9_cast_fu_509_p1;
reg   [7:0] matrix_addr9_cast_reg_881;
wire   [3:0] e_5_fu_519_p2;
reg   [3:0] e_5_reg_889;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_146;
wire   [0:0] exitcond3_fu_513_p2;
wire   [7:0] matrix_addr1_fu_543_p2;
reg   [7:0] matrix_addr1_reg_899;
wire   [3:0] i_14_fu_558_p2;
reg   [3:0] i_14_reg_907;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_162;
wire   [0:0] exitcond4_fu_552_p2;
reg   [0:0] vector_load_reg_917;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_175;
wire   [7:0] tmp_2_trn_cast_fu_569_p1;
reg   [7:0] tmp_2_trn_cast_reg_921;
wire   [3:0] e_6_fu_579_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_189;
wire   [3:0] i_10_fu_613_p2;
reg   [3:0] i_10_reg_937;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_201;
wire   [0:0] exitcond5_fu_607_p2;
wire   [7:0] matrix_addr5_cast_fu_632_p1;
reg   [7:0] matrix_addr5_cast_reg_950;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_215;
wire   [3:0] e_7_fu_642_p2;
reg   [3:0] e_7_reg_958;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_225;
wire   [0:0] exitcond8_fu_636_p2;
wire   [7:0] min_4_min_1_fu_668_p3;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_239;
wire   [3:0] i_11_fu_682_p2;
reg   [3:0] i_11_reg_976;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_248;
wire   [0:0] exitcond7_fu_676_p2;
reg   [0:0] vector_load_2_reg_986;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_261;
wire   [7:0] matrix_addr3_cast_fu_701_p1;
reg   [7:0] matrix_addr3_cast_reg_990;
wire   [3:0] e_8_fu_711_p2;
reg   [3:0] e_8_reg_998;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_273;
reg   [5:0] matrix_addr_3_reg_1003;
wire   [0:0] exitcond10_fu_705_p2;
wire   [3:0] i_12_fu_744_p2;
reg   [3:0] i_12_reg_1011;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_291;
wire   [0:0] exitcond9_fu_738_p2;
reg   [0:0] vector_load_3_reg_1021;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_304;
wire   [7:0] matrix_addr1_cast_fu_763_p1;
reg   [7:0] matrix_addr1_cast_reg_1025;
wire   [3:0] e_9_fu_773_p2;
reg   [3:0] e_9_reg_1033;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_316;
wire   [0:0] exitcond11_fu_767_p2;
reg   [0:0] tmp_20_reg_1046;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_334;
wire   [3:0] i_16_fu_818_p2;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_347;
wire   [3:0] i_17_fu_836_p2;
reg   [3:0] i_17_reg_1069;
reg    ap_sig_cseq_ST_st25_fsm_24;
reg    ap_sig_bdd_359;
wire   [63:0] tmp_25_fu_842_p1;
reg   [63:0] tmp_25_reg_1074;
wire   [0:0] exitcond_fu_830_p2;
reg   [3:0] i_reg_268;
wire   [0:0] exitcond1_fu_460_p2;
reg   [3:0] i_1_reg_279;
reg   [3:0] e_reg_290;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_390;
reg   [3:0] i_2_reg_301;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_399;
wire   [0:0] exitcond6_fu_573_p2;
reg   [3:0] e_1_reg_313;
reg   [3:0] i_3_reg_324;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_417;
reg   [7:0] min_reg_336;
reg   [3:0] e_2_reg_348;
reg   [7:0] min_1_reg_359;
reg   [7:0] min_3_reg_370;
reg   [3:0] i_4_reg_383;
reg   [3:0] e_3_reg_395;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_447;
reg   [3:0] i_5_reg_406;
reg   [3:0] e_4_reg_419;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_463;
reg   [3:0] i_6_reg_431;
reg   [3:0] i_7_reg_443;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_bdd_477;
wire   [0:0] tmp_22_fu_824_p2;
wire   [63:0] tmp_fu_455_p1;
wire   [63:0] tmp_1_fu_472_p1;
wire   [63:0] tmp_9_fu_534_p1;
wire   [63:0] tmp_15_fu_548_p1;
wire   [63:0] tmp_2_fu_564_p1;
wire   [63:0] tmp_28_fu_602_p1;
wire   [63:0] tmp_10_fu_619_p1;
wire   [63:0] tmp_30_fu_657_p1;
wire   [63:0] tmp_13_fu_688_p1;
wire   [63:0] tmp_31_fu_726_p1;
wire   [63:0] tmp_17_fu_750_p1;
wire   [63:0] tmp_32_fu_788_p1;
wire   [63:0] tmp_23_fu_793_p1;
wire   [0:0] tmp_24_fu_799_p2;
wire   [63:0] tmp_21_fu_813_p1;
wire   [7:0] tmp_19_fu_731_p2;
wire   [2:0] tmp_5_fu_489_p1;
wire   [6:0] tmp_12_fu_501_p3;
wire   [5:0] tmp_7_cast_fu_525_p1;
wire   [5:0] tmp_8_fu_529_p2;
wire   [7:0] tmp_trn_cast_fu_539_p1;
wire   [6:0] tmp_27_fu_585_p3;
wire   [7:0] matrix_addr7_cast_fu_593_p1;
wire   [7:0] matrix_addr8_fu_597_p2;
wire   [6:0] tmp_18_fu_624_p3;
wire   [7:0] tmp_15_trn_cast_fu_648_p1;
wire   [7:0] matrix_addr6_fu_652_p2;
wire   [0:0] tmp_14_fu_662_p2;
wire   [6:0] tmp_26_fu_693_p3;
wire   [7:0] tmp_20_trn_cast_fu_717_p1;
wire   [7:0] matrix_addr4_fu_721_p2;
wire   [6:0] tmp_29_fu_755_p3;
wire   [7:0] tmp_24_trn_cast_fu_779_p1;
wire   [7:0] matrix_addr2_fu_783_p2;
reg   [25:0] ap_NS_fsm;


dijkstra_vector #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
vector_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( vector_address0 ),
    .ce0( vector_ce0 ),
    .we0( vector_we0 ),
    .d0( vector_d0 ),
    .q0( vector_q0 )
);

dijkstra_matrix #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
matrix_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( matrix_address0 ),
    .ce0( matrix_ce0 ),
    .we0( matrix_we0 ),
    .d0( matrix_d0 ),
    .q0( matrix_q0 )
);

dijkstra_result #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
result_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( result_address0 ),
    .ce0( result_ce0 ),
    .we0( result_we0 ),
    .d0( result_d0 ),
    .q0( result_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(vector_q0 == ap_const_lv1_0))) begin
        e_1_reg_313 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == vector_load_reg_917) & (ap_const_lv1_0 == exitcond6_fu_573_p2))) begin
        e_1_reg_313 <= e_6_fu_579_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        e_2_reg_348 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        e_2_reg_348 <= e_7_reg_958;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        e_3_reg_395 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        e_3_reg_395 <= e_8_reg_998;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19))) begin
        e_4_reg_419 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        e_4_reg_419 <= e_9_reg_1033;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        e_reg_290 <= e_5_reg_889;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond2_fu_477_p2 == ap_const_lv1_0))) begin
        e_reg_290 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond1_fu_460_p2))) begin
        i_1_reg_279 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_513_p2))) begin
        i_1_reg_279 <= i_9_reg_871;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ((ap_const_lv1_0 == vector_load_reg_917) | ~(ap_const_lv1_0 == exitcond6_fu_573_p2)))) begin
        i_2_reg_301 <= i_14_reg_907;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_2_reg_301 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond4_fu_552_p2))) begin
        i_3_reg_324 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        i_3_reg_324 <= i_10_reg_937;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == exitcond5_fu_607_p2))) begin
        i_4_reg_383 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ((ap_const_lv1_0 == vector_load_2_reg_986) | ~(ap_const_lv1_0 == exitcond10_fu_705_p2)))) begin
        i_4_reg_383 <= i_11_reg_976;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond7_fu_676_p2))) begin
        i_5_reg_406 <= ap_const_lv4_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) & ((ap_const_lv1_0 == vector_load_3_reg_1021) | ~(ap_const_lv1_0 == exitcond11_fu_767_p2)))) begin
        i_5_reg_406 <= i_12_reg_1011;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18) & ~(ap_const_lv1_0 == exitcond9_fu_738_p2))) begin
        i_6_reg_431 <= ap_const_lv4_1;
    end else if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) & (ap_const_lv1_0 == tmp_20_reg_1046))) begin
        i_6_reg_431 <= i_16_fu_818_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23) & ((~(ap_const_lv1_0 == tmp_22_fu_824_p2) & ~(ap_const_lv1_0 == tmp_20_reg_1046)) | ((vector_q0 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_22_fu_824_p2))))) begin
        i_7_reg_443 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        i_7_reg_443 <= i_17_reg_1069;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond1_fu_460_p2))) begin
        i_reg_268 <= i_8_fu_466_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_268 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        min_1_reg_359 <= min_reg_336;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        min_1_reg_359 <= min_4_min_1_fu_668_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~(ap_const_lv1_0 == exitcond8_fu_636_p2))) begin
        min_3_reg_370 <= min_1_reg_359;
    end else if (((vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        min_3_reg_370 <= min_reg_336;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond4_fu_552_p2))) begin
        min_reg_336 <= ap_const_lv8_FF;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        min_reg_336 <= min_3_reg_370;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        e_5_reg_889 <= e_5_fu_519_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        e_7_reg_958 <= e_7_fu_642_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(ap_const_lv1_0 == vector_load_2_reg_986))) begin
        e_8_reg_998 <= e_8_fu_711_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) & ~(ap_const_lv1_0 == vector_load_3_reg_1021))) begin
        e_9_reg_1033 <= e_9_fu_773_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_10_reg_937 <= i_10_fu_613_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        i_11_reg_976 <= i_11_fu_682_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        i_12_reg_1011 <= i_12_fu_744_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_14_reg_907 <= i_14_fu_558_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        i_17_reg_1069 <= i_17_fu_836_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_9_reg_871 <= i_9_fu_483_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19))) begin
        matrix_addr1_cast_reg_1025[3] <= matrix_addr1_cast_fu_763_p1[3];
matrix_addr1_cast_reg_1025[4] <= matrix_addr1_cast_fu_763_p1[4];
matrix_addr1_cast_reg_1025[5] <= matrix_addr1_cast_fu_763_p1[5];
matrix_addr1_cast_reg_1025[6] <= matrix_addr1_cast_fu_763_p1[6];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_513_p2))) begin
        matrix_addr1_reg_899 <= matrix_addr1_fu_543_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        matrix_addr3_cast_reg_990[3] <= matrix_addr3_cast_fu_701_p1[3];
matrix_addr3_cast_reg_990[4] <= matrix_addr3_cast_fu_701_p1[4];
matrix_addr3_cast_reg_990[5] <= matrix_addr3_cast_fu_701_p1[5];
matrix_addr3_cast_reg_990[6] <= matrix_addr3_cast_fu_701_p1[6];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(vector_q0 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        matrix_addr5_cast_reg_950[3] <= matrix_addr5_cast_fu_632_p1[3];
matrix_addr5_cast_reg_950[4] <= matrix_addr5_cast_fu_632_p1[4];
matrix_addr5_cast_reg_950[5] <= matrix_addr5_cast_fu_632_p1[5];
matrix_addr5_cast_reg_950[6] <= matrix_addr5_cast_fu_632_p1[6];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond2_fu_477_p2 == ap_const_lv1_0))) begin
        matrix_addr9_cast_reg_881[3] <= matrix_addr9_cast_fu_509_p1[3];
matrix_addr9_cast_reg_881[4] <= matrix_addr9_cast_fu_509_p1[4];
matrix_addr9_cast_reg_881[5] <= matrix_addr9_cast_fu_509_p1[5];
matrix_addr9_cast_reg_881[6] <= matrix_addr9_cast_fu_509_p1[6];
        tmp_4_reg_876[3] <= tmp_4_fu_493_p3[3];
tmp_4_reg_876[4] <= tmp_4_fu_493_p3[4];
tmp_4_reg_876[5] <= tmp_4_fu_493_p3[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) & ~(ap_const_lv1_0 == vector_load_2_reg_986) & (ap_const_lv1_0 == exitcond10_fu_705_p2))) begin
        matrix_addr_3_reg_1003 <= tmp_31_fu_726_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        tmp_20_reg_1046 <= i_6_reg_431[ap_const_lv32_3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) & (ap_const_lv1_0 == exitcond_fu_830_p2))) begin
        tmp_25_reg_1074[0] <= tmp_25_fu_842_p1[0];
tmp_25_reg_1074[1] <= tmp_25_fu_842_p1[1];
tmp_25_reg_1074[2] <= tmp_25_fu_842_p1[2];
tmp_25_reg_1074[3] <= tmp_25_fu_842_p1[3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & ~(vector_q0 == ap_const_lv1_0))) begin
        tmp_2_trn_cast_reg_921[0] <= tmp_2_trn_cast_fu_569_p1[0];
tmp_2_trn_cast_reg_921[1] <= tmp_2_trn_cast_fu_569_p1[1];
tmp_2_trn_cast_reg_921[2] <= tmp_2_trn_cast_fu_569_p1[2];
tmp_2_trn_cast_reg_921[3] <= tmp_2_trn_cast_fu_569_p1[3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        vector_load_2_reg_986 <= vector_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        vector_load_3_reg_1021 <= vector_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        vector_load_reg_917 <= vector_q0;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24 or exitcond_fu_830_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) & ~(ap_const_lv1_0 == exitcond_fu_830_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24 or exitcond_fu_830_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) & ~(ap_const_lv1_0 == exitcond_fu_830_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_201)
begin
    if (ap_sig_bdd_201) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_215)
begin
    if (ap_sig_bdd_215) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_225)
begin
    if (ap_sig_bdd_225) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_239)
begin
    if (ap_sig_bdd_239) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_417)
begin
    if (ap_sig_bdd_417) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_248)
begin
    if (ap_sig_bdd_248) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_261)
begin
    if (ap_sig_bdd_261) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_273)
begin
    if (ap_sig_bdd_273) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_447)
begin
    if (ap_sig_bdd_447) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_291)
begin
    if (ap_sig_bdd_291) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_42)
begin
    if (ap_sig_bdd_42) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_304)
begin
    if (ap_sig_bdd_304) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_316)
begin
    if (ap_sig_bdd_316) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_463)
begin
    if (ap_sig_bdd_463) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_334)
begin
    if (ap_sig_bdd_334) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_347)
begin
    if (ap_sig_bdd_347) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st25_fsm_24 assign process. ///
always @ (ap_sig_bdd_359)
begin
    if (ap_sig_bdd_359) begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st26_fsm_25 assign process. ///
always @ (ap_sig_bdd_477)
begin
    if (ap_sig_bdd_477) begin
        ap_sig_cseq_ST_st26_fsm_25 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_129)
begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_146)
begin
    if (ap_sig_bdd_146) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_390)
begin
    if (ap_sig_bdd_390) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_399)
begin
    if (ap_sig_bdd_399) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_175)
begin
    if (ap_sig_bdd_175) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_189)
begin
    if (ap_sig_bdd_189) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// in_data_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        in_data_V_ce0 = ap_const_logic_1;
    end else begin
        in_data_V_ce0 = ap_const_logic_0;
    end
end

/// matrix_address0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st17_fsm_16 or matrix_addr_3_reg_1003 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st18_fsm_17 or tmp_15_fu_548_p1 or tmp_28_fu_602_p1 or tmp_30_fu_657_p1 or tmp_31_fu_726_p1 or tmp_32_fu_788_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        matrix_address0 = matrix_addr_3_reg_1003;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        matrix_address0 = tmp_28_fu_602_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        matrix_address0 = tmp_15_fu_548_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        matrix_address0 = tmp_32_fu_788_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        matrix_address0 = tmp_31_fu_726_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        matrix_address0 = tmp_30_fu_657_p1;
    end else begin
        matrix_address0 = 'bx;
    end
end

/// matrix_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st17_fsm_16 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st18_fsm_17)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16) | (ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        matrix_ce0 = ap_const_logic_1;
    end else begin
        matrix_ce0 = ap_const_logic_0;
    end
end

/// matrix_d0 assign process. ///
always @ (in_data_V_q0 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st18_fsm_17 or tmp_19_fu_731_p2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        matrix_d0 = tmp_19_fu_731_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        matrix_d0 = ap_const_lv8_FF;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        matrix_d0 = in_data_V_q0;
    end else begin
        matrix_d0 = 'bx;
    end
end

/// matrix_we0 assign process. ///
always @ (vector_load_reg_917 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st5_fsm_4 or exitcond6_fu_573_p2 or ap_sig_cseq_ST_st18_fsm_17)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == vector_load_reg_917) & (ap_const_lv1_0 == exitcond6_fu_573_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        matrix_we0 = ap_const_logic_1;
    end else begin
        matrix_we0 = ap_const_logic_0;
    end
end

/// out_data_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st26_fsm_25)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        out_data_V_ce0 = ap_const_logic_1;
    end else begin
        out_data_V_ce0 = ap_const_logic_0;
    end
end

/// out_data_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st26_fsm_25)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        out_data_V_we0 = ap_const_logic_1;
    end else begin
        out_data_V_we0 = ap_const_logic_0;
    end
end

/// out_last_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        out_last_V_ce0 = ap_const_logic_1;
    end else begin
        out_last_V_ce0 = ap_const_logic_0;
    end
end

/// out_last_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24 or exitcond_fu_830_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) & (ap_const_lv1_0 == exitcond_fu_830_p2))) begin
        out_last_V_we0 = ap_const_logic_1;
    end else begin
        out_last_V_we0 = ap_const_logic_0;
    end
end

/// result_address0 assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24 or tmp_25_fu_842_p1 or ap_sig_cseq_ST_st22_fsm_21 or tmp_23_fu_793_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        result_address0 = tmp_23_fu_793_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        result_address0 = tmp_25_fu_842_p1;
    end else begin
        result_address0 = 'bx;
    end
end

/// result_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st25_fsm_24 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21))) begin
        result_ce0 = ap_const_logic_1;
    end else begin
        result_ce0 = ap_const_logic_0;
    end
end

/// result_we0 assign process. ///
always @ (ap_sig_cseq_ST_st22_fsm_21 or tmp_24_fu_799_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & ~(ap_const_lv1_0 == tmp_24_fu_799_p2))) begin
        result_we0 = ap_const_logic_1;
    end else begin
        result_we0 = ap_const_logic_0;
    end
end

/// vector_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st19_fsm_18 or ap_sig_cseq_ST_st23_fsm_22 or ap_sig_cseq_ST_st22_fsm_21 or tmp_fu_455_p1 or tmp_1_fu_472_p1 or tmp_2_fu_564_p1 or tmp_10_fu_619_p1 or tmp_13_fu_688_p1 or tmp_17_fu_750_p1 or tmp_23_fu_793_p1 or tmp_21_fu_813_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        vector_address0 = tmp_23_fu_793_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        vector_address0 = tmp_1_fu_472_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        vector_address0 = tmp_fu_455_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        vector_address0 = tmp_21_fu_813_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        vector_address0 = tmp_17_fu_750_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        vector_address0 = tmp_13_fu_688_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        vector_address0 = tmp_10_fu_619_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        vector_address0 = tmp_2_fu_564_p1;
    end else begin
        vector_address0 = 'bx;
    end
end

/// vector_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st19_fsm_18 or ap_sig_cseq_ST_st23_fsm_22 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18) | (ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21))) begin
        vector_ce0 = ap_const_logic_1;
    end else begin
        vector_ce0 = ap_const_logic_0;
    end
end

/// vector_d0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        vector_d0 = ap_const_lv1_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21))) begin
        vector_d0 = ap_const_lv1_1;
    end else begin
        vector_d0 = 'bx;
    end
end

/// vector_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_460_p2 or ap_sig_cseq_ST_st22_fsm_21 or tmp_24_fu_799_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond1_fu_460_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) & ~(ap_const_lv1_0 == tmp_24_fu_799_p2)))) begin
        vector_we0 = ap_const_logic_1;
    end else begin
        vector_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or vector_q0 or exitcond2_fu_477_p2 or exitcond3_fu_513_p2 or exitcond4_fu_552_p2 or vector_load_reg_917 or exitcond5_fu_607_p2 or exitcond8_fu_636_p2 or exitcond7_fu_676_p2 or vector_load_2_reg_986 or exitcond10_fu_705_p2 or exitcond9_fu_738_p2 or vector_load_3_reg_1021 or exitcond11_fu_767_p2 or tmp_20_reg_1046 or exitcond_fu_830_p2 or exitcond1_fu_460_p2 or exitcond6_fu_573_p2 or tmp_22_fu_824_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_460_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((exitcond2_fu_477_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_513_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond4_fu_552_p2)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            if (((ap_const_lv1_0 == vector_load_reg_917) | ~(ap_const_lv1_0 == exitcond6_fu_573_p2))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond5_fu_607_p2)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            if (~(vector_q0 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            if (~(ap_const_lv1_0 == exitcond8_fu_636_p2)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st15_fsm_14 : 
        begin
            if (~(ap_const_lv1_0 == exitcond7_fu_676_p2)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            if (((ap_const_lv1_0 == vector_load_2_reg_986) | ~(ap_const_lv1_0 == exitcond10_fu_705_p2))) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st19_fsm_18 : 
        begin
            if (~(ap_const_lv1_0 == exitcond9_fu_738_p2)) begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            if (((ap_const_lv1_0 == vector_load_3_reg_1021) | ~(ap_const_lv1_0 == exitcond11_fu_767_p2))) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            if ((((ap_const_lv1_0 == tmp_22_fu_824_p2) & ~(ap_const_lv1_0 == tmp_20_reg_1046)) | ((vector_q0 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_22_fu_824_p2)))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else if (((~(ap_const_lv1_0 == tmp_22_fu_824_p2) & ~(ap_const_lv1_0 == tmp_20_reg_1046)) | ((vector_q0 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_22_fu_824_p2)))) begin
                ap_NS_fsm = ap_ST_st25_fsm_24;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end
        end
        ap_ST_st25_fsm_24 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_830_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st26_fsm_25;
            end
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_129 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_146 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_146 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_175 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_175 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_189 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_189 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_201 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_201 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_215 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_215 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_225 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_225 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_239 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_239 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_248 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_248 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_261 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_261 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_273 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_273 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_291 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_291 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end

/// ap_sig_bdd_304 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_304 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_316 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_316 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_334 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_334 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_347 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_347 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_359 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_359 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_18]);
end

/// ap_sig_bdd_390 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_390 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_399 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_399 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_417 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_417 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_42 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_42 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_447 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_447 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_463 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_463 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_477 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_477 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_19]);
end
assign e_5_fu_519_p2 = (e_reg_290 + ap_const_lv4_1);
assign e_6_fu_579_p2 = (e_1_reg_313 + ap_const_lv4_1);
assign e_7_fu_642_p2 = (e_2_reg_348 + ap_const_lv4_1);
assign e_8_fu_711_p2 = (e_3_reg_395 + ap_const_lv4_1);
assign e_9_fu_773_p2 = (e_4_reg_419 + ap_const_lv4_1);
assign exitcond10_fu_705_p2 = (e_3_reg_395 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond11_fu_767_p2 = (e_4_reg_419 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond1_fu_460_p2 = (i_reg_268 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond2_fu_477_p2 = (i_1_reg_279 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond3_fu_513_p2 = (e_reg_290 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond4_fu_552_p2 = (i_2_reg_301 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond5_fu_607_p2 = (i_3_reg_324 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond6_fu_573_p2 = (e_1_reg_313 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond7_fu_676_p2 = (i_4_reg_383 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond8_fu_636_p2 = (e_2_reg_348 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond9_fu_738_p2 = (i_5_reg_406 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_830_p2 = (i_7_reg_443 == ap_const_lv4_8? 1'b1: 1'b0);
assign i_10_fu_613_p2 = (i_3_reg_324 + ap_const_lv4_1);
assign i_11_fu_682_p2 = (i_4_reg_383 + ap_const_lv4_1);
assign i_12_fu_744_p2 = (i_5_reg_406 + ap_const_lv4_1);
assign i_14_fu_558_p2 = (i_2_reg_301 + ap_const_lv4_1);
assign i_16_fu_818_p2 = (i_6_reg_431 + ap_const_lv4_1);
assign i_17_fu_836_p2 = (i_7_reg_443 + ap_const_lv4_1);
assign i_8_fu_466_p2 = (i_reg_268 + ap_const_lv4_1);
assign i_9_fu_483_p2 = (i_1_reg_279 + ap_const_lv4_1);
assign in_data_V_address0 = tmp_9_fu_534_p1;
assign in_last_V_address0 = ap_const_lv6_0;
assign in_last_V_address1 = ap_const_lv6_0;
assign in_last_V_ce0 = ap_const_logic_0;
assign in_last_V_ce1 = ap_const_logic_0;
assign in_last_V_d0 = ap_const_lv1_0;
assign in_last_V_d1 = ap_const_lv1_0;
assign in_last_V_we0 = ap_const_logic_0;
assign in_last_V_we1 = ap_const_logic_0;
assign matrix_addr1_cast_fu_763_p1 = tmp_29_fu_755_p3;
assign matrix_addr1_fu_543_p2 = (matrix_addr9_cast_reg_881 + tmp_trn_cast_fu_539_p1);
assign matrix_addr2_fu_783_p2 = (matrix_addr1_cast_reg_1025 + tmp_24_trn_cast_fu_779_p1);
assign matrix_addr3_cast_fu_701_p1 = tmp_26_fu_693_p3;
assign matrix_addr4_fu_721_p2 = (matrix_addr3_cast_reg_990 + tmp_20_trn_cast_fu_717_p1);
assign matrix_addr5_cast_fu_632_p1 = tmp_18_fu_624_p3;
assign matrix_addr6_fu_652_p2 = (matrix_addr5_cast_reg_950 + tmp_15_trn_cast_fu_648_p1);
assign matrix_addr7_cast_fu_593_p1 = tmp_27_fu_585_p3;
assign matrix_addr8_fu_597_p2 = (matrix_addr7_cast_fu_593_p1 + tmp_2_trn_cast_reg_921);
assign matrix_addr9_cast_fu_509_p1 = tmp_12_fu_501_p3;
assign min_4_min_1_fu_668_p3 = ((tmp_14_fu_662_p2)? matrix_q0: min_1_reg_359);
assign out_data_V_address0 = tmp_25_reg_1074;
assign out_data_V_d0 = result_q0;
assign out_last_V_address0 = tmp_25_fu_842_p1;
assign out_last_V_d0 = (i_7_reg_443 > ap_const_lv4_6? 1'b1: 1'b0);
assign result_d0 = i_5_reg_406;
assign tmp_10_fu_619_p1 = i_3_reg_324;
assign tmp_12_fu_501_p3 = {{i_1_reg_279}, {ap_const_lv3_0}};
assign tmp_13_fu_688_p1 = i_4_reg_383;
assign tmp_14_fu_662_p2 = (matrix_q0 < min_1_reg_359? 1'b1: 1'b0);
assign tmp_15_fu_548_p1 = matrix_addr1_reg_899;
assign tmp_15_trn_cast_fu_648_p1 = e_2_reg_348;
assign tmp_17_fu_750_p1 = i_5_reg_406;
assign tmp_18_fu_624_p3 = {{i_3_reg_324}, {ap_const_lv3_0}};
assign tmp_19_fu_731_p2 = (matrix_q0 - min_reg_336);
assign tmp_1_fu_472_p1 = i_reg_268;
assign tmp_20_trn_cast_fu_717_p1 = e_3_reg_395;
assign tmp_21_fu_813_p1 = i_6_reg_431;
assign tmp_22_fu_824_p2 = (i_6_reg_431 > ap_const_lv4_6? 1'b1: 1'b0);
assign tmp_23_fu_793_p1 = e_4_reg_419;
assign tmp_24_fu_799_p2 = (matrix_q0 == ap_const_lv8_0? 1'b1: 1'b0);
assign tmp_24_trn_cast_fu_779_p1 = e_4_reg_419;
assign tmp_25_fu_842_p1 = i_7_reg_443;
assign tmp_26_fu_693_p3 = {{i_4_reg_383}, {ap_const_lv3_0}};
assign tmp_27_fu_585_p3 = {{e_1_reg_313}, {ap_const_lv3_0}};
assign tmp_28_fu_602_p1 = matrix_addr8_fu_597_p2;
assign tmp_29_fu_755_p3 = {{i_5_reg_406}, {ap_const_lv3_0}};
assign tmp_2_fu_564_p1 = i_2_reg_301;
assign tmp_2_trn_cast_fu_569_p1 = i_2_reg_301;
assign tmp_30_fu_657_p1 = matrix_addr6_fu_652_p2;
assign tmp_31_fu_726_p1 = matrix_addr4_fu_721_p2;
assign tmp_32_fu_788_p1 = matrix_addr2_fu_783_p2;
assign tmp_4_fu_493_p3 = {{tmp_5_fu_489_p1}, {ap_const_lv3_0}};
assign tmp_5_fu_489_p1 = i_1_reg_279[2:0];
assign tmp_7_cast_fu_525_p1 = e_reg_290;
assign tmp_8_fu_529_p2 = (tmp_4_reg_876 + tmp_7_cast_fu_525_p1);
assign tmp_9_fu_534_p1 = tmp_8_fu_529_p2;
assign tmp_fu_455_p1 = start_point_V;
assign tmp_trn_cast_fu_539_p1 = e_reg_290;
always @ (posedge ap_clk)
begin
    tmp_4_reg_876[2:0] <= 3'b000;
    matrix_addr9_cast_reg_881[2:0] <= 3'b000;
    matrix_addr9_cast_reg_881[7] <= 1'b0;
    tmp_2_trn_cast_reg_921[7:4] <= 4'b0000;
    matrix_addr5_cast_reg_950[2:0] <= 3'b000;
    matrix_addr5_cast_reg_950[7] <= 1'b0;
    matrix_addr3_cast_reg_990[2:0] <= 3'b000;
    matrix_addr3_cast_reg_990[7] <= 1'b0;
    matrix_addr1_cast_reg_1025[2:0] <= 3'b000;
    matrix_addr1_cast_reg_1025[7] <= 1'b0;
    tmp_25_reg_1074[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end



endmodule //dijkstra

