-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dijkstra is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_data_V_ce0 : OUT STD_LOGIC;
    in_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_last_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_last_V_ce0 : OUT STD_LOGIC;
    in_last_V_we0 : OUT STD_LOGIC;
    in_last_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_last_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    in_last_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_last_V_ce1 : OUT STD_LOGIC;
    in_last_V_we1 : OUT STD_LOGIC;
    in_last_V_d1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_last_V_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    start_point_V : IN STD_LOGIC_VECTOR (7 downto 0);
    out_data_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_V_ce0 : OUT STD_LOGIC;
    out_data_V_we0 : OUT STD_LOGIC;
    out_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_last_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_last_V_ce0 : OUT STD_LOGIC;
    out_last_V_we0 : OUT STD_LOGIC;
    out_last_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dijkstra is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dijkstra,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=213,HLS_SYN_LUT=329}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal vector_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal vector_ce0 : STD_LOGIC;
    signal vector_we0 : STD_LOGIC;
    signal vector_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal vector_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal matrix_ce0 : STD_LOGIC;
    signal matrix_we0 : STD_LOGIC;
    signal matrix_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal i_9_fu_483_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal tmp_4_fu_493_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_876 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal matrix_addr9_cast_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr9_cast_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_5_fu_519_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_5_reg_889 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal exitcond3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal matrix_addr1_fu_543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr1_reg_899 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_14_fu_558_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal exitcond4_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vector_load_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal tmp_2_trn_cast_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_trn_cast_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_6_fu_579_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal i_10_fu_613_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_937 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_201 : BOOLEAN;
    signal exitcond5_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal matrix_addr5_cast_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr5_cast_reg_950 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal e_7_fu_642_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_7_reg_958 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal exitcond8_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_4_min_1_fu_668_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_239 : BOOLEAN;
    signal i_11_fu_682_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_976 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_248 : BOOLEAN;
    signal exitcond7_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vector_load_2_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_261 : BOOLEAN;
    signal matrix_addr3_cast_fu_701_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr3_cast_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_8_fu_711_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_8_reg_998 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal matrix_addr_3_reg_1003 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond10_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_744_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_1011 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_291 : BOOLEAN;
    signal exitcond9_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vector_load_3_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_304 : BOOLEAN;
    signal matrix_addr1_cast_fu_763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr1_cast_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_9_fu_773_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_9_reg_1033 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_316 : BOOLEAN;
    signal exitcond11_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_334 : BOOLEAN;
    signal i_16_fu_818_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_347 : BOOLEAN;
    signal i_17_fu_836_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_17_reg_1069 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_359 : BOOLEAN;
    signal tmp_25_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1074 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_268 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_390 : BOOLEAN;
    signal i_2_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_399 : BOOLEAN;
    signal exitcond6_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_1_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_417 : BOOLEAN;
    signal min_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_2_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal min_1_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_3_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_3_reg_395 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_447 : BOOLEAN;
    signal i_5_reg_406 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_4_reg_419 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_463 : BOOLEAN;
    signal i_6_reg_431 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_477 : BOOLEAN;
    signal tmp_22_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_489_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_501_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_525_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_529_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_trn_cast_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_585_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal matrix_addr7_cast_fu_593_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr8_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_624_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_trn_cast_fu_648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr6_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_693_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_trn_cast_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr4_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_755_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_trn_cast_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_addr2_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component dijkstra_vector IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dijkstra_matrix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dijkstra_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    vector_U : component dijkstra_vector
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vector_address0,
        ce0 => vector_ce0,
        we0 => vector_we0,
        d0 => vector_d0,
        q0 => vector_q0);

    matrix_U : component dijkstra_matrix
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => matrix_address0,
        ce0 => matrix_ce0,
        we0 => matrix_we0,
        d0 => matrix_d0,
        q0 => matrix_q0);

    result_U : component dijkstra_result
    generic map (
        DataWidth => 4,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- e_1_reg_313 assign process. --
    e_1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((vector_q0 = ap_const_lv1_0)))) then 
                e_1_reg_313 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = vector_load_reg_917)) and (ap_const_lv1_0 = exitcond6_fu_573_p2))) then 
                e_1_reg_313 <= e_6_fu_579_p2;
            end if; 
        end if;
    end process;

    -- e_2_reg_348 assign process. --
    e_2_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                e_2_reg_348 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                e_2_reg_348 <= e_7_reg_958;
            end if; 
        end if;
    end process;

    -- e_3_reg_395 assign process. --
    e_3_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
                e_3_reg_395 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                e_3_reg_395 <= e_8_reg_998;
            end if; 
        end if;
    end process;

    -- e_4_reg_419 assign process. --
    e_4_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
                e_4_reg_419 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                e_4_reg_419 <= e_9_reg_1033;
            end if; 
        end if;
    end process;

    -- e_reg_290 assign process. --
    e_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                e_reg_290 <= e_5_reg_889;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_477_p2 = ap_const_lv1_0))) then 
                e_reg_290 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_1_reg_279 assign process. --
    i_1_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_460_p2)))) then 
                i_1_reg_279 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond3_fu_513_p2)))) then 
                i_1_reg_279 <= i_9_reg_871;
            end if; 
        end if;
    end process;

    -- i_2_reg_301 assign process. --
    i_2_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and ((ap_const_lv1_0 = vector_load_reg_917) or not((ap_const_lv1_0 = exitcond6_fu_573_p2))))) then 
                i_2_reg_301 <= i_14_reg_907;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_2_reg_301 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_3_reg_324 assign process. --
    i_3_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond4_fu_552_p2)))) then 
                i_3_reg_324 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                i_3_reg_324 <= i_10_reg_937;
            end if; 
        end if;
    end process;

    -- i_4_reg_383 assign process. --
    i_4_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond5_fu_607_p2)))) then 
                i_4_reg_383 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and ((ap_const_lv1_0 = vector_load_2_reg_986) or not((ap_const_lv1_0 = exitcond10_fu_705_p2))))) then 
                i_4_reg_383 <= i_11_reg_976;
            end if; 
        end if;
    end process;

    -- i_5_reg_406 assign process. --
    i_5_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond7_fu_676_p2)))) then 
                i_5_reg_406 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and ((ap_const_lv1_0 = vector_load_3_reg_1021) or not((ap_const_lv1_0 = exitcond11_fu_767_p2))))) then 
                i_5_reg_406 <= i_12_reg_1011;
            end if; 
        end if;
    end process;

    -- i_6_reg_431 assign process. --
    i_6_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond9_fu_738_p2)))) then 
                i_6_reg_431 <= ap_const_lv4_1;
            elsif ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = tmp_20_reg_1046))) then 
                i_6_reg_431 <= i_16_fu_818_p2;
            end if; 
        end if;
    end process;

    -- i_7_reg_443 assign process. --
    i_7_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and ((not((ap_const_lv1_0 = tmp_22_fu_824_p2)) and not((ap_const_lv1_0 = tmp_20_reg_1046))) or ((vector_q0 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_22_fu_824_p2)))))) then 
                i_7_reg_443 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
                i_7_reg_443 <= i_17_reg_1069;
            end if; 
        end if;
    end process;

    -- i_reg_268 assign process. --
    i_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_460_p2))) then 
                i_reg_268 <= i_8_fu_466_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_268 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- min_1_reg_359 assign process. --
    min_1_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                min_1_reg_359 <= min_reg_336;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                min_1_reg_359 <= min_4_min_1_fu_668_p3;
            end if; 
        end if;
    end process;

    -- min_3_reg_370 assign process. --
    min_3_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond8_fu_636_p2)))) then 
                min_3_reg_370 <= min_1_reg_359;
            elsif (((vector_q0 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                min_3_reg_370 <= min_reg_336;
            end if; 
        end if;
    end process;

    -- min_reg_336 assign process. --
    min_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond4_fu_552_p2)))) then 
                min_reg_336 <= ap_const_lv8_FF;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                min_reg_336 <= min_3_reg_370;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                e_5_reg_889 <= e_5_fu_519_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                e_7_reg_958 <= e_7_fu_642_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_lv1_0 = vector_load_2_reg_986)))) then
                e_8_reg_998 <= e_8_fu_711_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = vector_load_3_reg_1021)))) then
                e_9_reg_1033 <= e_9_fu_773_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                i_10_reg_937 <= i_10_fu_613_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                i_11_reg_976 <= i_11_fu_682_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                i_12_reg_1011 <= i_12_fu_744_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i_14_reg_907 <= i_14_fu_558_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_17_reg_1069 <= i_17_fu_836_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_9_reg_871 <= i_9_fu_483_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then
                matrix_addr1_cast_reg_1025(3) <= matrix_addr1_cast_fu_763_p1(3);
    matrix_addr1_cast_reg_1025(4) <= matrix_addr1_cast_fu_763_p1(4);
    matrix_addr1_cast_reg_1025(5) <= matrix_addr1_cast_fu_763_p1(5);
    matrix_addr1_cast_reg_1025(6) <= matrix_addr1_cast_fu_763_p1(6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond3_fu_513_p2))) then
                matrix_addr1_reg_899 <= matrix_addr1_fu_543_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then
                matrix_addr3_cast_reg_990(3) <= matrix_addr3_cast_fu_701_p1(3);
    matrix_addr3_cast_reg_990(4) <= matrix_addr3_cast_fu_701_p1(4);
    matrix_addr3_cast_reg_990(5) <= matrix_addr3_cast_fu_701_p1(5);
    matrix_addr3_cast_reg_990(6) <= matrix_addr3_cast_fu_701_p1(6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((vector_q0 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then
                matrix_addr5_cast_reg_950(3) <= matrix_addr5_cast_fu_632_p1(3);
    matrix_addr5_cast_reg_950(4) <= matrix_addr5_cast_fu_632_p1(4);
    matrix_addr5_cast_reg_950(5) <= matrix_addr5_cast_fu_632_p1(5);
    matrix_addr5_cast_reg_950(6) <= matrix_addr5_cast_fu_632_p1(6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_477_p2 = ap_const_lv1_0))) then
                matrix_addr9_cast_reg_881(3) <= matrix_addr9_cast_fu_509_p1(3);
    matrix_addr9_cast_reg_881(4) <= matrix_addr9_cast_fu_509_p1(4);
    matrix_addr9_cast_reg_881(5) <= matrix_addr9_cast_fu_509_p1(5);
    matrix_addr9_cast_reg_881(6) <= matrix_addr9_cast_fu_509_p1(6);
                tmp_4_reg_876(3) <= tmp_4_fu_493_p3(3);
    tmp_4_reg_876(4) <= tmp_4_fu_493_p3(4);
    tmp_4_reg_876(5) <= tmp_4_fu_493_p3(5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_lv1_0 = vector_load_2_reg_986)) and (ap_const_lv1_0 = exitcond10_fu_705_p2))) then
                matrix_addr_3_reg_1003 <= tmp_31_fu_726_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                tmp_20_reg_1046 <= i_6_reg_431(3 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_fu_830_p2))) then
                tmp_25_reg_1074(0) <= tmp_25_fu_842_p1(0);
    tmp_25_reg_1074(1) <= tmp_25_fu_842_p1(1);
    tmp_25_reg_1074(2) <= tmp_25_fu_842_p1(2);
    tmp_25_reg_1074(3) <= tmp_25_fu_842_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((vector_q0 = ap_const_lv1_0)))) then
                tmp_2_trn_cast_reg_921(0) <= tmp_2_trn_cast_fu_569_p1(0);
    tmp_2_trn_cast_reg_921(1) <= tmp_2_trn_cast_fu_569_p1(1);
    tmp_2_trn_cast_reg_921(2) <= tmp_2_trn_cast_fu_569_p1(2);
    tmp_2_trn_cast_reg_921(3) <= tmp_2_trn_cast_fu_569_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                vector_load_2_reg_986 <= vector_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                vector_load_3_reg_1021 <= vector_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                vector_load_reg_917 <= vector_q0;
            end if;
        end if;
    end process;
    tmp_4_reg_876(2 downto 0) <= "000";
    matrix_addr9_cast_reg_881(2 downto 0) <= "000";
    matrix_addr9_cast_reg_881(7) <= '0';
    tmp_2_trn_cast_reg_921(7 downto 4) <= "0000";
    matrix_addr5_cast_reg_950(2 downto 0) <= "000";
    matrix_addr5_cast_reg_950(7) <= '0';
    matrix_addr3_cast_reg_990(2 downto 0) <= "000";
    matrix_addr3_cast_reg_990(7) <= '0';
    matrix_addr1_cast_reg_1025(2 downto 0) <= "000";
    matrix_addr1_cast_reg_1025(7) <= '0';
    tmp_25_reg_1074(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, vector_q0, exitcond2_fu_477_p2, exitcond3_fu_513_p2, exitcond4_fu_552_p2, vector_load_reg_917, exitcond5_fu_607_p2, exitcond8_fu_636_p2, exitcond7_fu_676_p2, vector_load_2_reg_986, exitcond10_fu_705_p2, exitcond9_fu_738_p2, vector_load_3_reg_1021, exitcond11_fu_767_p2, tmp_20_reg_1046, exitcond_fu_830_p2, exitcond1_fu_460_p2, exitcond6_fu_573_p2, tmp_22_fu_824_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_460_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond2_fu_477_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_513_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_552_p2))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (((ap_const_lv1_0 = vector_load_reg_917) or not((ap_const_lv1_0 = exitcond6_fu_573_p2)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_607_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not((vector_q0 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_636_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_676_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (((ap_const_lv1_0 = vector_load_2_reg_986) or not((ap_const_lv1_0 = exitcond10_fu_705_p2)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_738_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (((ap_const_lv1_0 = vector_load_3_reg_1021) or not((ap_const_lv1_0 = exitcond11_fu_767_p2)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if ((((ap_const_lv1_0 = tmp_22_fu_824_p2) and not((ap_const_lv1_0 = tmp_20_reg_1046))) or ((vector_q0 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_22_fu_824_p2)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                elsif (((not((ap_const_lv1_0 = tmp_22_fu_824_p2)) and not((ap_const_lv1_0 = tmp_20_reg_1046))) or ((vector_q0 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_22_fu_824_p2))))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond_fu_830_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond_fu_830_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_fu_830_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond_fu_830_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_fu_830_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_201 assign process. --
    ap_sig_bdd_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_201 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_239 assign process. --
    ap_sig_bdd_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_239 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_248 assign process. --
    ap_sig_bdd_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_248 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_261 assign process. --
    ap_sig_bdd_261_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_261 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_291 assign process. --
    ap_sig_bdd_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_291 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_304 assign process. --
    ap_sig_bdd_304_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_304 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_316 assign process. --
    ap_sig_bdd_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_316 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_334 assign process. --
    ap_sig_bdd_334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_334 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_347 assign process. --
    ap_sig_bdd_347_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_347 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_359 assign process. --
    ap_sig_bdd_359_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_359 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_390 assign process. --
    ap_sig_bdd_390_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_390 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_399 assign process. --
    ap_sig_bdd_399_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_399 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_417 assign process. --
    ap_sig_bdd_417_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_417 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_447 assign process. --
    ap_sig_bdd_447_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_447 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_463 assign process. --
    ap_sig_bdd_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_463 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_477 assign process. --
    ap_sig_bdd_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_477 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_201)
    begin
        if (ap_sig_bdd_201) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_239)
    begin
        if (ap_sig_bdd_239) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_417)
    begin
        if (ap_sig_bdd_417) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_248)
    begin
        if (ap_sig_bdd_248) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_261)
    begin
        if (ap_sig_bdd_261) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_447)
    begin
        if (ap_sig_bdd_447) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_291)
    begin
        if (ap_sig_bdd_291) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_304)
    begin
        if (ap_sig_bdd_304) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_316)
    begin
        if (ap_sig_bdd_316) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_463)
    begin
        if (ap_sig_bdd_463) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_334)
    begin
        if (ap_sig_bdd_334) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_347)
    begin
        if (ap_sig_bdd_347) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_359)
    begin
        if (ap_sig_bdd_359) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_477)
    begin
        if (ap_sig_bdd_477) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_390)
    begin
        if (ap_sig_bdd_390) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_399)
    begin
        if (ap_sig_bdd_399) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    e_5_fu_519_p2 <= std_logic_vector(unsigned(e_reg_290) + unsigned(ap_const_lv4_1));
    e_6_fu_579_p2 <= std_logic_vector(unsigned(e_1_reg_313) + unsigned(ap_const_lv4_1));
    e_7_fu_642_p2 <= std_logic_vector(unsigned(e_2_reg_348) + unsigned(ap_const_lv4_1));
    e_8_fu_711_p2 <= std_logic_vector(unsigned(e_3_reg_395) + unsigned(ap_const_lv4_1));
    e_9_fu_773_p2 <= std_logic_vector(unsigned(e_4_reg_419) + unsigned(ap_const_lv4_1));
    exitcond10_fu_705_p2 <= "1" when (e_3_reg_395 = ap_const_lv4_8) else "0";
    exitcond11_fu_767_p2 <= "1" when (e_4_reg_419 = ap_const_lv4_8) else "0";
    exitcond1_fu_460_p2 <= "1" when (i_reg_268 = ap_const_lv4_8) else "0";
    exitcond2_fu_477_p2 <= "1" when (i_1_reg_279 = ap_const_lv4_8) else "0";
    exitcond3_fu_513_p2 <= "1" when (e_reg_290 = ap_const_lv4_8) else "0";
    exitcond4_fu_552_p2 <= "1" when (i_2_reg_301 = ap_const_lv4_8) else "0";
    exitcond5_fu_607_p2 <= "1" when (i_3_reg_324 = ap_const_lv4_8) else "0";
    exitcond6_fu_573_p2 <= "1" when (e_1_reg_313 = ap_const_lv4_8) else "0";
    exitcond7_fu_676_p2 <= "1" when (i_4_reg_383 = ap_const_lv4_8) else "0";
    exitcond8_fu_636_p2 <= "1" when (e_2_reg_348 = ap_const_lv4_8) else "0";
    exitcond9_fu_738_p2 <= "1" when (i_5_reg_406 = ap_const_lv4_8) else "0";
    exitcond_fu_830_p2 <= "1" when (i_7_reg_443 = ap_const_lv4_8) else "0";
    i_10_fu_613_p2 <= std_logic_vector(unsigned(i_3_reg_324) + unsigned(ap_const_lv4_1));
    i_11_fu_682_p2 <= std_logic_vector(unsigned(i_4_reg_383) + unsigned(ap_const_lv4_1));
    i_12_fu_744_p2 <= std_logic_vector(unsigned(i_5_reg_406) + unsigned(ap_const_lv4_1));
    i_14_fu_558_p2 <= std_logic_vector(unsigned(i_2_reg_301) + unsigned(ap_const_lv4_1));
    i_16_fu_818_p2 <= std_logic_vector(unsigned(i_6_reg_431) + unsigned(ap_const_lv4_1));
    i_17_fu_836_p2 <= std_logic_vector(unsigned(i_7_reg_443) + unsigned(ap_const_lv4_1));
    i_8_fu_466_p2 <= std_logic_vector(unsigned(i_reg_268) + unsigned(ap_const_lv4_1));
    i_9_fu_483_p2 <= std_logic_vector(unsigned(i_1_reg_279) + unsigned(ap_const_lv4_1));
    in_data_V_address0 <= tmp_9_fu_534_p1(6 - 1 downto 0);

    -- in_data_V_ce0 assign process. --
    in_data_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            in_data_V_ce0 <= ap_const_logic_1;
        else 
            in_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_last_V_address0 <= ap_const_lv6_0;
    in_last_V_address1 <= ap_const_lv6_0;
    in_last_V_ce0 <= ap_const_logic_0;
    in_last_V_ce1 <= ap_const_logic_0;
    in_last_V_d0 <= ap_const_lv1_0;
    in_last_V_d1 <= ap_const_lv1_0;
    in_last_V_we0 <= ap_const_logic_0;
    in_last_V_we1 <= ap_const_logic_0;
    matrix_addr1_cast_fu_763_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_755_p3),8));
    matrix_addr1_fu_543_p2 <= std_logic_vector(unsigned(matrix_addr9_cast_reg_881) + unsigned(tmp_trn_cast_fu_539_p1));
    matrix_addr2_fu_783_p2 <= std_logic_vector(unsigned(matrix_addr1_cast_reg_1025) + unsigned(tmp_24_trn_cast_fu_779_p1));
    matrix_addr3_cast_fu_701_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_693_p3),8));
    matrix_addr4_fu_721_p2 <= std_logic_vector(unsigned(matrix_addr3_cast_reg_990) + unsigned(tmp_20_trn_cast_fu_717_p1));
    matrix_addr5_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_624_p3),8));
    matrix_addr6_fu_652_p2 <= std_logic_vector(unsigned(matrix_addr5_cast_reg_950) + unsigned(tmp_15_trn_cast_fu_648_p1));
    matrix_addr7_cast_fu_593_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_585_p3),8));
    matrix_addr8_fu_597_p2 <= std_logic_vector(unsigned(matrix_addr7_cast_fu_593_p1) + unsigned(tmp_2_trn_cast_reg_921));
    matrix_addr9_cast_fu_509_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_501_p3),8));

    -- matrix_address0 assign process. --
    matrix_address0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st17_fsm_16, matrix_addr_3_reg_1003, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17, tmp_15_fu_548_p1, tmp_28_fu_602_p1, tmp_30_fu_657_p1, tmp_31_fu_726_p1, tmp_32_fu_788_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            matrix_address0 <= matrix_addr_3_reg_1003;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            matrix_address0 <= tmp_28_fu_602_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            matrix_address0 <= tmp_15_fu_548_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            matrix_address0 <= tmp_32_fu_788_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            matrix_address0 <= tmp_31_fu_726_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            matrix_address0 <= tmp_30_fu_657_p1(6 - 1 downto 0);
        else 
            matrix_address0 <= "XXXXXX";
        end if; 
    end process;


    -- matrix_ce0 assign process. --
    matrix_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            matrix_ce0 <= ap_const_logic_1;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_d0 assign process. --
    matrix_d0_assign_proc : process(in_data_V_q0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17, tmp_19_fu_731_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            matrix_d0 <= tmp_19_fu_731_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            matrix_d0 <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            matrix_d0 <= in_data_V_q0;
        else 
            matrix_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- matrix_we0 assign process. --
    matrix_we0_assign_proc : process(vector_load_reg_917, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st5_fsm_4, exitcond6_fu_573_p2, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = vector_load_reg_917)) and (ap_const_lv1_0 = exitcond6_fu_573_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            matrix_we0 <= ap_const_logic_1;
        else 
            matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    min_4_min_1_fu_668_p3 <= 
        matrix_q0 when (tmp_14_fu_662_p2(0) = '1') else 
        min_1_reg_359;
    out_data_V_address0 <= tmp_25_reg_1074(3 - 1 downto 0);

    -- out_data_V_ce0 assign process. --
    out_data_V_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            out_data_V_ce0 <= ap_const_logic_1;
        else 
            out_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_V_d0 <= std_logic_vector(resize(unsigned(result_q0),8));

    -- out_data_V_we0 assign process. --
    out_data_V_we0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            out_data_V_we0 <= ap_const_logic_1;
        else 
            out_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_address0 <= tmp_25_fu_842_p1(3 - 1 downto 0);

    -- out_last_V_ce0 assign process. --
    out_last_V_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            out_last_V_ce0 <= ap_const_logic_1;
        else 
            out_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_d0 <= "1" when (unsigned(i_7_reg_443) > unsigned(ap_const_lv4_6)) else "0";

    -- out_last_V_we0 assign process. --
    out_last_V_we0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond_fu_830_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_fu_830_p2)))) then 
            out_last_V_we0 <= ap_const_logic_1;
        else 
            out_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- result_address0 assign process. --
    result_address0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmp_25_fu_842_p1, ap_sig_cseq_ST_st22_fsm_21, tmp_23_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            result_address0 <= tmp_23_fu_793_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            result_address0 <= tmp_25_fu_842_p1(3 - 1 downto 0);
        else 
            result_address0 <= "XXX";
        end if; 
    end process;


    -- result_ce0 assign process. --
    result_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= i_5_reg_406;

    -- result_we0 assign process. --
    result_we0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, tmp_24_fu_799_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = tmp_24_fu_799_p2))))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_619_p1 <= std_logic_vector(resize(unsigned(i_3_reg_324),64));
    tmp_12_fu_501_p3 <= (i_1_reg_279 & ap_const_lv3_0);
    tmp_13_fu_688_p1 <= std_logic_vector(resize(unsigned(i_4_reg_383),64));
    tmp_14_fu_662_p2 <= "1" when (unsigned(matrix_q0) < unsigned(min_1_reg_359)) else "0";
    tmp_15_fu_548_p1 <= std_logic_vector(resize(unsigned(matrix_addr1_reg_899),64));
    tmp_15_trn_cast_fu_648_p1 <= std_logic_vector(resize(unsigned(e_2_reg_348),8));
    tmp_17_fu_750_p1 <= std_logic_vector(resize(unsigned(i_5_reg_406),64));
    tmp_18_fu_624_p3 <= (i_3_reg_324 & ap_const_lv3_0);
    tmp_19_fu_731_p2 <= std_logic_vector(unsigned(matrix_q0) - unsigned(min_reg_336));
    tmp_1_fu_472_p1 <= std_logic_vector(resize(unsigned(i_reg_268),64));
    tmp_20_trn_cast_fu_717_p1 <= std_logic_vector(resize(unsigned(e_3_reg_395),8));
    tmp_21_fu_813_p1 <= std_logic_vector(resize(unsigned(i_6_reg_431),64));
    tmp_22_fu_824_p2 <= "1" when (unsigned(i_6_reg_431) > unsigned(ap_const_lv4_6)) else "0";
    tmp_23_fu_793_p1 <= std_logic_vector(resize(unsigned(e_4_reg_419),64));
    tmp_24_fu_799_p2 <= "1" when (matrix_q0 = ap_const_lv8_0) else "0";
    tmp_24_trn_cast_fu_779_p1 <= std_logic_vector(resize(unsigned(e_4_reg_419),8));
    tmp_25_fu_842_p1 <= std_logic_vector(resize(unsigned(i_7_reg_443),64));
    tmp_26_fu_693_p3 <= (i_4_reg_383 & ap_const_lv3_0);
    tmp_27_fu_585_p3 <= (e_1_reg_313 & ap_const_lv3_0);
    tmp_28_fu_602_p1 <= std_logic_vector(resize(unsigned(matrix_addr8_fu_597_p2),64));
    tmp_29_fu_755_p3 <= (i_5_reg_406 & ap_const_lv3_0);
    tmp_2_fu_564_p1 <= std_logic_vector(resize(unsigned(i_2_reg_301),64));
    tmp_2_trn_cast_fu_569_p1 <= std_logic_vector(resize(unsigned(i_2_reg_301),8));
    tmp_30_fu_657_p1 <= std_logic_vector(resize(unsigned(matrix_addr6_fu_652_p2),64));
    tmp_31_fu_726_p1 <= std_logic_vector(resize(unsigned(matrix_addr4_fu_721_p2),64));
    tmp_32_fu_788_p1 <= std_logic_vector(resize(unsigned(matrix_addr2_fu_783_p2),64));
    tmp_4_fu_493_p3 <= (tmp_5_fu_489_p1 & ap_const_lv3_0);
    tmp_5_fu_489_p1 <= i_1_reg_279(3 - 1 downto 0);
    tmp_7_cast_fu_525_p1 <= std_logic_vector(resize(unsigned(e_reg_290),6));
    tmp_8_fu_529_p2 <= std_logic_vector(unsigned(tmp_4_reg_876) + unsigned(tmp_7_cast_fu_525_p1));
    tmp_9_fu_534_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_529_p2),64));
    tmp_fu_455_p1 <= std_logic_vector(resize(unsigned(start_point_V),64));
    tmp_trn_cast_fu_539_p1 <= std_logic_vector(resize(unsigned(e_reg_290),8));

    -- vector_address0 assign process. --
    vector_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st22_fsm_21, tmp_fu_455_p1, tmp_1_fu_472_p1, tmp_2_fu_564_p1, tmp_10_fu_619_p1, tmp_13_fu_688_p1, tmp_17_fu_750_p1, tmp_23_fu_793_p1, tmp_21_fu_813_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            vector_address0 <= tmp_23_fu_793_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            vector_address0 <= tmp_1_fu_472_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            vector_address0 <= tmp_fu_455_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            vector_address0 <= tmp_21_fu_813_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            vector_address0 <= tmp_17_fu_750_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            vector_address0 <= tmp_13_fu_688_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            vector_address0 <= tmp_10_fu_619_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            vector_address0 <= tmp_2_fu_564_p1(3 - 1 downto 0);
        else 
            vector_address0 <= "XXX";
        end if; 
    end process;


    -- vector_ce0 assign process. --
    vector_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            vector_ce0 <= ap_const_logic_1;
        else 
            vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- vector_d0 assign process. --
    vector_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            vector_d0 <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            vector_d0 <= ap_const_lv1_1;
        else 
            vector_d0 <= "X";
        end if; 
    end process;


    -- vector_we0 assign process. --
    vector_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_460_p2, ap_sig_cseq_ST_st22_fsm_21, tmp_24_fu_799_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_460_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = tmp_24_fu_799_p2))))) then 
            vector_we0 <= ap_const_logic_1;
        else 
            vector_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
